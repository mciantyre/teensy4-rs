(function() {var type_impls = {
"teensy4_bsp":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lpuart%3CP,+N%3E\" class=\"impl\"><a href=\"#impl-Lpuart%3CP,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; Lpuart&lt;P, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dma_write\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dma_write</a>&lt;'a&gt;(\n    &amp;'a mut self,\n    channel: &amp;'a mut Channel,\n    buffer: &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>]\n) -&gt; Write&lt;'a, Lpuart&lt;P, N&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Use a DMA channel to write data to the UART peripheral</p>\n<p>Completes when all data in <code>buffer</code> has been written to the UART\nperipheral.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dma_read\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dma_read</a>&lt;'a&gt;(\n    &amp;'a mut self,\n    channel: &amp;'a mut Channel,\n    buffer: &amp;'a mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>]\n) -&gt; Read&lt;'a, Lpuart&lt;P, N&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Use a DMA channel to read data from the UART peripheral</p>\n<p>Completes when <code>buffer</code> is filled.</p>\n</div></details></div></details>",0,"teensy4_bsp::board::Lpuart6","teensy4_bsp::board::Lpuart4","teensy4_bsp::board::Lpuart2","teensy4_bsp::board::Lpuart3","teensy4_bsp::board::Lpuart8","teensy4_bsp::board::Lpuart1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lpuart%3CPins%3CTX,+RX%3E,+N%3E\" class=\"impl\"><a href=\"#impl-Lpuart%3CPins%3CTX,+RX%3E,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;TX, RX, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; Lpuart&lt;Pins&lt;TX, RX&gt;, N&gt;<div class=\"where\">where\n    RX: Pin&lt;Module = Const&lt;N&gt;, Direction = Rx&gt;,\n    TX: Pin&lt;Module = Const&lt;N&gt;, Direction = Tx&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    lpuart: Instance&lt;RegisterBlock, N&gt;,\n    pins: Pins&lt;TX, RX&gt;\n) -&gt; Lpuart&lt;Pins&lt;TX, RX&gt;, N&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new LPUART peripheral from its peripheral registers\nand TX / RX pins.</p>\n<p>When <code>new</code> returns, the peripheral is reset, the pins are\nconfigured for their LPUART functions, and the TX and RX\nhalves are enabled.</p>\n</div></details></div></details>",0,"teensy4_bsp::board::Lpuart6","teensy4_bsp::board::Lpuart4","teensy4_bsp::board::Lpuart2","teensy4_bsp::board::Lpuart3","teensy4_bsp::board::Lpuart8","teensy4_bsp::board::Lpuart1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lpuart%3CP,+N%3E\" class=\"impl\"><a href=\"#impl-Lpuart%3CP,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; Lpuart&lt;P, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.N\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">N</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a> = N</h4></section></summary><div class=\"docblock\"><p>The peripheral instance.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_enabled\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_enabled</a>(&amp;self, direction: Direction) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Indicates if the transmit / receive functions are\n(<code>true</code>) or are not (<code>false</code>) enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_enable\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_enable</a>(&amp;mut self, direction: Direction, enable: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Enable (<code>true</code>) or disable (<code>false</code>) the transmit / receive\nfunctions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reset</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Resets all internal logic and registers.</p>\n<p>Note that this may not reset all peripheral state, like the state\nin the peripheral’s global register.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.release\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">release</a>(self) -&gt; (Instance&lt;RegisterBlock, N&gt;, P)</h4></section></summary><div class=\"docblock\"><p>Release all components of the LPUART driver.</p>\n<p>This does not change any component state; it releases the components as-is.\nIf you need to obtain the registers in a known, good state, consider calling\nmethods like <a href=\"Self::reset\"><code>reset()</code></a> before releasing the registers.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pins\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pins</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;P</a></h4></section></summary><div class=\"docblock\"><p>Borrow the LPUART pins.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pins_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pins_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut P</a></h4></section></summary><div class=\"docblock\"><p>Exclusively borrow the LPUART pins.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disable\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">disable</a>&lt;R&gt;(&amp;mut self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut Disabled&lt;'_, N&gt;) -&gt; R) -&gt; R</h4></section></summary><div class=\"docblock\"><p>Temporarily disable the LPUART peripheral.</p>\n<p>The handle to a <a href=\"crate::lpuart::Disabled\"><code>Disabled</code></a> driver lets you modify\nLPUART settings that require a fully disabled peripheral. This will flush\nTX and RX buffers.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.baud\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">baud</a>(&amp;self) -&gt; Baud</h4></section></summary><div class=\"docblock\"><p>Return the baud-specific timing values for this UART peripheral.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">parity</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Parity&gt;</h4></section></summary><div class=\"docblock\"><p>Return the parity seting for the UART peripheral.</p>\n<p>Result is <code>None</code> if there is no parity setting.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_inverted\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_inverted</a>(&amp;self, direction: Direction) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Indicates if the bits are inverted.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_fifo_enabled\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_fifo_enabled</a>(&amp;self, direction: Direction) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Indicates if the FIFO is enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fifo_watermark\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fifo_watermark</a>(&amp;self, direction: Direction) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the FIFO watermark value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read_data</a>(&amp;self) -&gt; ReadData</h4></section></summary><div class=\"docblock\"><p>Read the data register.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_byte\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write_byte</a>(&amp;self, byte: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>)</h4></section></summary><div class=\"docblock\"><p>Write a byte.</p>\n<p>This does not perform any checks for space in the transmit\nbuffer. To check transmit buffer space, use <code>status</code>, and\ncheck for the transmit data register empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.status\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">status</a>(&amp;self) -&gt; Status</h4></section></summary><div class=\"docblock\"><p>Check the peripheral status register.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_status\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear_status</a>(&amp;mut self, status: Status)</h4></section></summary><div class=\"docblock\"><p>Clear the status flags.</p>\n<p>Bits that are read-only will be cleared by the implementation, so it’s\nsafe to call with <code>Status::all()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush_fifo\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">flush_fifo</a>(&amp;mut self, direction: Direction)</h4></section></summary><div class=\"docblock\"><p>Flush data from the FIFO.</p>\n<p>This does not flush anything that’s already in the transmit or receive register.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.interrupts\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">interrupts</a>(&amp;self) -&gt; Interrupts</h4></section></summary><div class=\"docblock\"><p>Return the interrupt flags.</p>\n<p>The interrupt flags indicate the reasons that this peripheral may generate an\ninterrupt.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enable_dma_transmit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">enable_dma_transmit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Let the peripheral act as a DMA destination.</p>\n<p>After this call, the peripheral will signal to the DMA engine whenever\nit has free space in its transfer buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disable_dma_transmit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">disable_dma_transmit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Stop the peripheral from acting as a DMA destination.</p>\n<p>See the DMA chapter in the reference manual to understand when this\nshould be called in the DMA transfer lifecycle.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">data</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.pointer.html\">*const </a>RWRegister&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Produces a pointer to the data register.</p>\n<p>You should use this pointer when coordinating a DMA transfer.\nYou’re not expected to read from this pointer in software.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enable_dma_receive\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">enable_dma_receive</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Let the peripheral act as a DMA source.</p>\n<p>After this call, the peripheral will signal to the DMA engine whenever\nit has data available to read.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disable_dma_receive\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">disable_dma_receive</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Stop the peripheral from acting as a DMA source.</p>\n<p>See the DMA chapter in the reference manual to understand when this\nshould be called in the DMA transfer lifecycle.</p>\n</div></details></div></details>",0,"teensy4_bsp::board::Lpuart6","teensy4_bsp::board::Lpuart4","teensy4_bsp::board::Lpuart2","teensy4_bsp::board::Lpuart3","teensy4_bsp::board::Lpuart8","teensy4_bsp::board::Lpuart1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Destination%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"impl\"><a href=\"#impl-Destination%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; Destination&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for Lpuart&lt;P, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.destination_signal\" class=\"method trait-impl\"><a href=\"#method.destination_signal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">destination_signal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Peripheral destination request signal <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.destination_address\" class=\"method trait-impl\"><a href=\"#method.destination_address\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">destination_address</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Returns a pointer to the register into which the DMA channel\nwrites data <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enable_destination\" class=\"method trait-impl\"><a href=\"#method.enable_destination\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enable_destination</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Perform any actions necessary to enable DMA transfers <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disable_destination\" class=\"method trait-impl\"><a href=\"#method.disable_destination\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">disable_destination</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Perform any actions necessary to disable or cancel DMA transfers <a>Read more</a></div></details></div></details>","Destination<u8>","teensy4_bsp::board::Lpuart6","teensy4_bsp::board::Lpuart4","teensy4_bsp::board::Lpuart2","teensy4_bsp::board::Lpuart3","teensy4_bsp::board::Lpuart8","teensy4_bsp::board::Lpuart1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Source%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"impl\"><a href=\"#impl-Source%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; Source&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for Lpuart&lt;P, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.source_signal\" class=\"method trait-impl\"><a href=\"#method.source_signal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">source_signal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Peripheral source request signal <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.source_address\" class=\"method trait-impl\"><a href=\"#method.source_address\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">source_address</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Returns a pointer to the register from which the DMA channel\nreads data <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enable_source\" class=\"method trait-impl\"><a href=\"#method.enable_source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enable_source</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Perform any actions necessary to enable DMA transfers <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disable_source\" class=\"method trait-impl\"><a href=\"#method.disable_source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">disable_source</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Perform any actions necessary to disable or cancel DMA transfers <a>Read more</a></div></details></div></details>","Source<u8>","teensy4_bsp::board::Lpuart6","teensy4_bsp::board::Lpuart4","teensy4_bsp::board::Lpuart2","teensy4_bsp::board::Lpuart3","teensy4_bsp::board::Lpuart8","teensy4_bsp::board::Lpuart1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-_embedded_hal_blocking_serial_Write%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"impl\"><a href=\"#impl-_embedded_hal_blocking_serial_Write%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for Lpuart&lt;P, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type of error that can occur when writing</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bwrite_all\" class=\"method trait-impl\"><a href=\"#method.bwrite_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">bwrite_all</a>(\n    &amp;mut self,\n    buffer: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, &lt;Lpuart&lt;P, N&gt; as Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Writes a slice, blocking until everything has been written <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bflush\" class=\"method trait-impl\"><a href=\"#method.bflush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">bflush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, &lt;Lpuart&lt;P, N&gt; as Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::Error&gt;</h4></section></summary><div class='docblock'>Block until the serial interface has sent all buffered words</div></details></div></details>","Write<u8>","teensy4_bsp::board::Lpuart6","teensy4_bsp::board::Lpuart4","teensy4_bsp::board::Lpuart2","teensy4_bsp::board::Lpuart3","teensy4_bsp::board::Lpuart8","teensy4_bsp::board::Lpuart1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-_embedded_hal_serial_Write%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"impl\"><a href=\"#impl-_embedded_hal_serial_Write%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for Lpuart&lt;P, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>Write error</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(\n    &amp;mut self,\n    word: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, Error&lt;&lt;Lpuart&lt;P, N&gt; as Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Writes a single word to the serial interface</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, Error&lt;&lt;Lpuart&lt;P, N&gt; as Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Ensures that none of the previously written words are still buffered</div></details></div></details>","Write<u8>","teensy4_bsp::board::Lpuart6","teensy4_bsp::board::Lpuart4","teensy4_bsp::board::Lpuart2","teensy4_bsp::board::Lpuart3","teensy4_bsp::board::Lpuart8","teensy4_bsp::board::Lpuart1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-_embedded_hal_serial_Read%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"impl\"><a href=\"#impl-_embedded_hal_serial_Read%3Cu8%3E-for-Lpuart%3CP,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; Read&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for Lpuart&lt;P, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = ReadFlags</h4></section></summary><div class='docblock'>Read error</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>, Error&lt;&lt;Lpuart&lt;P, N&gt; as Read&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Reads a single word from the serial interface</div></details></div></details>","Read<u8>","teensy4_bsp::board::Lpuart6","teensy4_bsp::board::Lpuart4","teensy4_bsp::board::Lpuart2","teensy4_bsp::board::Lpuart3","teensy4_bsp::board::Lpuart8","teensy4_bsp::board::Lpuart1"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()