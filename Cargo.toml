[package]
name = "teensy4-bsp"
version = "0.1.0"
authors = ["Ian McIntyre <ianpmcintyre@gmail.com>"]
edition = "2018"
license = "MIT OR Apache-2.0"
repository = "https://github.com/mciantyre/teensy4-rs"
description = """
Rust-based BSP for the Teensy 4.
Part of the teensy4-rs project.
"""

[dependencies]
cortex-m = "0.6.2"
cortex-m-rt = "0.6.12" # Note: not the 'real' cortex-m-rt
teensy4-fcb = { path = "teensy4-fcb" }

[dependencies.imxrt-hal]
version = "0.3.0"
features = ["imxrt1062", "rt"]

# Tied to "systick" feature, since
# SysTick implements a blocking delay trait
[dependencies.embedded-hal]
version = "0.2.4"
optional = true

# Only need logging when "usb-logging" is enabled
[dependencies.log]
version = "0.4.8"
optional = true

# Only needed when "usb-logging" is enabled
[dependencies.teensy4-usb-sys]
path = "teensy4-usb-sys"
optional = true

[dev-dependencies]
embedded-hal = "0.2.4"
nb = "0.1.2"
panic-halt = "0.2.0"

[workspace]
members = [
    "cortex-m-rt-patch",
    "teensy4-fcb",
    "teensy4-rt",
    "teensy4-usb-sys",
]

[features]
# Default features established for prototype development
default = ["usb-logging", "systick"]
# Enables the USB logging stack
#
# This will introduce the teensy4-usb-sys bindings into the build
# graph. It also requires systick, since the USB stack depends on
# the systick counter for timekeeping.
usb-logging = ["systick", "teensy4-usb-sys", "log"]
# Include a definition of the SysTick exception handler. This enables
# a simple delay() spinloop that waits for the timer to elapse.
systick = ["embedded-hal"]

# Don't optimize build dependencies, like proc macros.
# Helps with build times.
[profile.release.build-override]
opt-level = 0

# Patch `cortex-m-rt` for reasons described here:
# https://github.com/mciantyre/teensy4-rs#runtime
[patch.crates-io.cortex-m-rt]
path = "cortex-m-rt-patch"
